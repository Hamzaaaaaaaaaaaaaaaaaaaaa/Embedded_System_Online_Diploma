/*
 * Student_Database_Using_Queue.c
 *
 *  Created on: Jul 19, 2024
 *      Author: Hamza Ahmed
 */

#include "Student_Database_Using_Queue.h"


/****************************************************************************************************************************************/
static void Print_Students_Info   (FIFO_Node_st *student);
static FIFO_Node_st *Search_Student_by_Roll_Number (FIFO_Buf_st *students_queue,int roll);
/* For not to repeat the roll number*/

/****************************************************************************************************************************************/

FIFO_Status_st Students_DB_Init (FIFO_Buf_st *students_queue,FIFO_Node_st *FIFO_Node_st,int length)
{
	if (!students_queue||!Node || !length)
	{
		printf("Student Initialization >> Failed\n");
		return FIFO_NULL;
	}
	students_queue -> base = Node ;
	students_queue -> head = 	students_queue -> base  ;
	students_queue -> tail = 	students_queue -> base;;
	students_queue -> length = length ;
	students_queue -> counter = 0 ;

	printf("Student Initialization >> Passed\n");
	return FIFO_NO_ERROR;


}
void  Add_Student (FIFO_Buf_st *students_queue)
{
	FIFO_Node_st new_student;
	int i ;
	printf("\n===ENter student data===\n");
	printf("\t Enter roll number: ");
	scanf("%d"&new_student.roll_number);

	//Scan if rhe roll number which entered is exist
	if (Search_Student_by_Roll_Number(students_queue,new_student.roll_number))
	{
		print("\n[ERROR] Roll number %d is already");
		printf("\n[ERROR] Adding student failed\n");

	}

	printf("\t Enter frist name : ");
	scanf("%s",new_student.first_name);

	printf("\t Enter last name : ");
	scanf("%s",new_student.last_name);

	printf("\t Enter GPA : ");
	scanf("%s",new_student.GPA);

	printf("\t Enter Courses IDs \n ");
	for(i = 0 ; i < COURSES_NUMBERS ; ++i)
	{
		printf("\t Enter Courses no.%d : ",i+1);
		scanf("%s",new_student.first_name);
	}
	//Add new student
	if(FIFO_enqueue(students_queue,new_student) == FIFO_NO_ERROR)
	{
		printf("\n[INFO] Student details us saved successfully\n");
	}
	else
	{
		printf("\nAdding Students failed \n");
	}

}
void  Find_Student_by_Roll_Number(FIFO_Buf_st *students_queue)
{
	FIFO_Node_st *student;
	FIFO_Status_st queue_status ;
	// check if rhe queue is empty
	queue_status = FIFO_is_Empty(students_queue);
	if ((queue_status == FIFO_EMPTY) || (queue_status == FIFO_NULL))
	{
		printf("\n[ERROR] Find student by roll number failed \n");
	}
	int roll_number ;
	printf("\n Enter roll number : ");
	scanf("%d",&roll_number);

	// Scan the queue to find the roll number
	student = Search_Student_by_Roll_Number(students_queue,roll_number);

}
void  Find_Student_by_FirstName(FIFO_Buf_st *students_queue);
void  Find_Student_by_Course (FIFO_Buf_st *students_queue);
void  Print_Student_by_Count (FIFO_Buf_st *students_queue);
void  Delete_Student_by_Roll_Number (FIFO_Buf_st *students_queue);
void  Update_Student_by_Roll_Number (FIFO_Buf_st *students_queue);
void  Update_DataBase_Students (FIFO_Buf_st *students_queue);
void  Show_Students_Info(FIFO_Buf_st *students_queue);
FIFO_Status_st FIFO_enqueue(FIFO_Buf_st *fifo_buf,FIFO_Node_st FIFO_Node_st );
FIFO_Status_st FIFO_is_Full(FIFO_Buf_st *fifo_buf);
FIFO_Status_st FIFO_is_Empty(FIFO_Buf_st *fifo_buf);
